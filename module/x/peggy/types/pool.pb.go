// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: peggy/v1/pool.proto

package types

import (
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// OutgoingTx is a withdrawal on the bridged contract
type OutgoingTx struct {
	Sender    string     `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	DestAddr  []byte     `protobuf:"bytes,2,opt,name=dest_addr,json=destAddr,proto3" json:"dest_addr,omitempty"`
	Amount    types.Coin `protobuf:"bytes,3,opt,name=amount,proto3" json:"amount"`
	BridgeFee types.Coin `protobuf:"bytes,4,opt,name=bridge_fee,json=bridgeFee,proto3" json:"bridge_fee"`
}

func (m *OutgoingTx) Reset()         { *m = OutgoingTx{} }
func (m *OutgoingTx) String() string { return proto.CompactTextString(m) }
func (*OutgoingTx) ProtoMessage()    {}
func (*OutgoingTx) Descriptor() ([]byte, []int) {
	return fileDescriptor_de0a859def4c189a, []int{0}
}
func (m *OutgoingTx) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OutgoingTx) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OutgoingTx.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OutgoingTx) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OutgoingTx.Merge(m, src)
}
func (m *OutgoingTx) XXX_Size() int {
	return m.Size()
}
func (m *OutgoingTx) XXX_DiscardUnknown() {
	xxx_messageInfo_OutgoingTx.DiscardUnknown(m)
}

var xxx_messageInfo_OutgoingTx proto.InternalMessageInfo

func (m *OutgoingTx) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *OutgoingTx) GetDestAddr() []byte {
	if m != nil {
		return m.DestAddr
	}
	return nil
}

func (m *OutgoingTx) GetAmount() types.Coin {
	if m != nil {
		return m.Amount
	}
	return types.Coin{}
}

func (m *OutgoingTx) GetBridgeFee() types.Coin {
	if m != nil {
		return m.BridgeFee
	}
	return types.Coin{}
}

// BridgedDenominator track and identify the ported ERC20 tokens into Peggy.
// An ERC20 token on the Ethereum side can be uniquely identified by the ERC20 contract address and the human readable symbol
// used for it in the contract
// In Peggy this is represented as "vouchers" that get minted and burned when interacting with the Ethereum side. These "vouchers"
// are identified by a prefixed string representation. See VoucherDenom type.
type BridgedDenominator struct {
	TokenContractAddress []byte `protobuf:"bytes,1,opt,name=token_contract_address,json=tokenContractAddress,proto3" json:"token_contract_address,omitempty"`
	Symbol               string `protobuf:"bytes,2,opt,name=symbol,proto3" json:"symbol,omitempty"`
	CosmosVoucherDenom   string `protobuf:"bytes,3,opt,name=cosmos_voucher_denom,json=cosmosVoucherDenom,proto3" json:"cosmos_voucher_denom,omitempty"`
}

func (m *BridgedDenominator) Reset()         { *m = BridgedDenominator{} }
func (m *BridgedDenominator) String() string { return proto.CompactTextString(m) }
func (*BridgedDenominator) ProtoMessage()    {}
func (*BridgedDenominator) Descriptor() ([]byte, []int) {
	return fileDescriptor_de0a859def4c189a, []int{1}
}
func (m *BridgedDenominator) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BridgedDenominator) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BridgedDenominator.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BridgedDenominator) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BridgedDenominator.Merge(m, src)
}
func (m *BridgedDenominator) XXX_Size() int {
	return m.Size()
}
func (m *BridgedDenominator) XXX_DiscardUnknown() {
	xxx_messageInfo_BridgedDenominator.DiscardUnknown(m)
}

var xxx_messageInfo_BridgedDenominator proto.InternalMessageInfo

func (m *BridgedDenominator) GetTokenContractAddress() []byte {
	if m != nil {
		return m.TokenContractAddress
	}
	return nil
}

func (m *BridgedDenominator) GetSymbol() string {
	if m != nil {
		return m.Symbol
	}
	return ""
}

func (m *BridgedDenominator) GetCosmosVoucherDenom() string {
	if m != nil {
		return m.CosmosVoucherDenom
	}
	return ""
}

func init() {
	proto.RegisterType((*OutgoingTx)(nil), "peggy.v1.OutgoingTx")
	proto.RegisterType((*BridgedDenominator)(nil), "peggy.v1.BridgedDenominator")
}

func init() { proto.RegisterFile("peggy/v1/pool.proto", fileDescriptor_de0a859def4c189a) }

var fileDescriptor_de0a859def4c189a = []byte{
	// 370 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x91, 0x31, 0x8e, 0xd4, 0x30,
	0x14, 0x86, 0x63, 0x58, 0x8d, 0x36, 0x66, 0x2b, 0x33, 0x5a, 0x85, 0x45, 0x0a, 0xa3, 0xad, 0xa6,
	0x21, 0xde, 0x00, 0x12, 0x1d, 0xd2, 0xce, 0x22, 0x0a, 0x1a, 0xa4, 0x08, 0x51, 0xd0, 0x44, 0x4e,
	0xfc, 0xf0, 0x44, 0x24, 0x7e, 0x91, 0xed, 0x44, 0x33, 0xb7, 0xa0, 0xe0, 0x34, 0x9c, 0x60, 0xca,
	0x29, 0xa9, 0x10, 0x9a, 0xb9, 0x08, 0x8a, 0x9d, 0x03, 0xd0, 0xf9, 0xff, 0xff, 0xf7, 0xe4, 0xef,
	0xd7, 0xa3, 0x4f, 0x7b, 0x50, 0x6a, 0xcf, 0xc7, 0x9c, 0xf7, 0x88, 0x6d, 0xd6, 0x1b, 0x74, 0xc8,
	0x2e, 0xbd, 0x99, 0x8d, 0xf9, 0x4d, 0x5a, 0xa3, 0xed, 0xd0, 0xf2, 0x4a, 0x58, 0xe0, 0x63, 0x5e,
	0x81, 0x13, 0x39, 0xaf, 0xb1, 0xd1, 0x61, 0xf2, 0x66, 0xa9, 0x50, 0xa1, 0x7f, 0xf2, 0xe9, 0x15,
	0xdc, 0xdb, 0x5f, 0x84, 0xd2, 0x4f, 0x83, 0x53, 0xd8, 0x68, 0xf5, 0x79, 0xc7, 0xae, 0xe9, 0xc2,
	0x82, 0x96, 0x60, 0x12, 0xb2, 0x22, 0xeb, 0xb8, 0x98, 0x15, 0x7b, 0x4e, 0x63, 0x09, 0xd6, 0x95,
	0x42, 0x4a, 0x93, 0x3c, 0x5a, 0x91, 0xf5, 0x55, 0x71, 0x39, 0x19, 0xf7, 0x52, 0x1a, 0xf6, 0x96,
	0x2e, 0x44, 0x87, 0x83, 0x76, 0xc9, 0xe3, 0x15, 0x59, 0x3f, 0x79, 0xf5, 0x2c, 0x0b, 0x28, 0xd9,
	0x84, 0x92, 0xcd, 0x28, 0xd9, 0x03, 0x36, 0x7a, 0x73, 0x71, 0xf8, 0xf3, 0x22, 0x2a, 0xe6, 0x71,
	0xf6, 0x8e, 0xd2, 0xca, 0x34, 0x52, 0x41, 0xf9, 0x0d, 0x20, 0xb9, 0xf8, 0xbf, 0xe5, 0x38, 0xac,
	0x7c, 0x00, 0xb8, 0xfd, 0x49, 0x28, 0xdb, 0x78, 0x25, 0xdf, 0x83, 0xc6, 0xae, 0xd1, 0xc2, 0xa1,
	0x61, 0x6f, 0xe8, 0xb5, 0xc3, 0xef, 0xa0, 0xcb, 0x1a, 0xb5, 0x33, 0xa2, 0x0e, 0xd8, 0x60, 0xad,
	0x2f, 0x75, 0x55, 0x2c, 0x7d, 0xfa, 0x30, 0x87, 0xf7, 0x21, 0xf3, 0xd5, 0xf7, 0x5d, 0x85, 0xad,
	0xef, 0x37, 0x55, 0xf7, 0x8a, 0xdd, 0xd1, 0x65, 0x20, 0x2a, 0x47, 0x1c, 0xea, 0x2d, 0x98, 0x52,
	0x4e, 0x7f, 0xf9, 0xae, 0x71, 0xc1, 0x42, 0xf6, 0x25, 0x44, 0x9e, 0x62, 0xf3, 0xf1, 0x70, 0x4a,
	0xc9, 0xf1, 0x94, 0x92, 0xbf, 0xa7, 0x94, 0xfc, 0x38, 0xa7, 0xd1, 0xf1, 0x9c, 0x46, 0xbf, 0xcf,
	0x69, 0xf4, 0xf5, 0x4e, 0x35, 0x6e, 0x3b, 0x54, 0x59, 0x8d, 0x1d, 0x17, 0xad, 0xdb, 0x82, 0x78,
	0xa9, 0xc1, 0xf1, 0x70, 0xd8, 0x0e, 0xe5, 0xd0, 0x02, 0xdf, 0xcd, 0xd2, 0xed, 0x7b, 0xb0, 0xd5,
	0xc2, 0x9f, 0xe9, 0xf5, 0xbf, 0x00, 0x00, 0x00, 0xff, 0xff, 0xe8, 0xcc, 0x20, 0x10, 0xfd, 0x01,
	0x00, 0x00,
}

func (m *OutgoingTx) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OutgoingTx) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OutgoingTx) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.BridgeFee.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintPool(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size, err := m.Amount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintPool(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.DestAddr) > 0 {
		i -= len(m.DestAddr)
		copy(dAtA[i:], m.DestAddr)
		i = encodeVarintPool(dAtA, i, uint64(len(m.DestAddr)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintPool(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BridgedDenominator) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BridgedDenominator) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BridgedDenominator) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CosmosVoucherDenom) > 0 {
		i -= len(m.CosmosVoucherDenom)
		copy(dAtA[i:], m.CosmosVoucherDenom)
		i = encodeVarintPool(dAtA, i, uint64(len(m.CosmosVoucherDenom)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Symbol) > 0 {
		i -= len(m.Symbol)
		copy(dAtA[i:], m.Symbol)
		i = encodeVarintPool(dAtA, i, uint64(len(m.Symbol)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.TokenContractAddress) > 0 {
		i -= len(m.TokenContractAddress)
		copy(dAtA[i:], m.TokenContractAddress)
		i = encodeVarintPool(dAtA, i, uint64(len(m.TokenContractAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintPool(dAtA []byte, offset int, v uint64) int {
	offset -= sovPool(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *OutgoingTx) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovPool(uint64(l))
	}
	l = len(m.DestAddr)
	if l > 0 {
		n += 1 + l + sovPool(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovPool(uint64(l))
	l = m.BridgeFee.Size()
	n += 1 + l + sovPool(uint64(l))
	return n
}

func (m *BridgedDenominator) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TokenContractAddress)
	if l > 0 {
		n += 1 + l + sovPool(uint64(l))
	}
	l = len(m.Symbol)
	if l > 0 {
		n += 1 + l + sovPool(uint64(l))
	}
	l = len(m.CosmosVoucherDenom)
	if l > 0 {
		n += 1 + l + sovPool(uint64(l))
	}
	return n
}

func sovPool(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPool(x uint64) (n int) {
	return sovPool(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *OutgoingTx) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPool
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OutgoingTx: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OutgoingTx: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestAddr", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPool
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DestAddr = append(m.DestAddr[:0], dAtA[iNdEx:postIndex]...)
			if m.DestAddr == nil {
				m.DestAddr = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPool
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BridgeFee", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPool
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BridgeFee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPool(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPool
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPool
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BridgedDenominator) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPool
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BridgedDenominator: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BridgedDenominator: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenContractAddress", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPool
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenContractAddress = append(m.TokenContractAddress[:0], dAtA[iNdEx:postIndex]...)
			if m.TokenContractAddress == nil {
				m.TokenContractAddress = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Symbol", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Symbol = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CosmosVoucherDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CosmosVoucherDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPool(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPool
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPool
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPool(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPool
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPool
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPool
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPool
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPool
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPool
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPool        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPool          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPool = fmt.Errorf("proto: unexpected end of group")
)
