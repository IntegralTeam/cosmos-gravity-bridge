// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: peggy/v1/batch.proto

package types

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type OutgoingTxBatch struct {
	Nonce              uint64                `protobuf:"varint,1,opt,name=nonce,proto3" json:"nonce,omitempty"`
	Elements           []*OutgoingTransferTx `protobuf:"bytes,2,rep,name=elements,proto3" json:"elements,omitempty"`
	TotalFee           *ERC20Token           `protobuf:"bytes,4,opt,name=total_fee,json=totalFee,proto3" json:"total_fee,omitempty"`
	BridgedDenominator *BridgedDenominator   `protobuf:"bytes,5,opt,name=bridged_denominator,json=bridgedDenominator,proto3" json:"bridged_denominator,omitempty"`
	Valset             *Valset               `protobuf:"bytes,7,opt,name=valset,proto3" json:"valset,omitempty"`
	TokenContract      []byte                `protobuf:"bytes,8,opt,name=token_contract,json=tokenContract,proto3" json:"token_contract,omitempty"`
}

func (m *OutgoingTxBatch) Reset()         { *m = OutgoingTxBatch{} }
func (m *OutgoingTxBatch) String() string { return proto.CompactTextString(m) }
func (*OutgoingTxBatch) ProtoMessage()    {}
func (*OutgoingTxBatch) Descriptor() ([]byte, []int) {
	return fileDescriptor_398e85e0d69cec73, []int{0}
}
func (m *OutgoingTxBatch) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OutgoingTxBatch.Unmarshal(m, b)
}
func (m *OutgoingTxBatch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OutgoingTxBatch.Marshal(b, m, deterministic)
}
func (m *OutgoingTxBatch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OutgoingTxBatch.Merge(m, src)
}
func (m *OutgoingTxBatch) XXX_Size() int {
	return xxx_messageInfo_OutgoingTxBatch.Size(m)
}
func (m *OutgoingTxBatch) XXX_DiscardUnknown() {
	xxx_messageInfo_OutgoingTxBatch.DiscardUnknown(m)
}

var xxx_messageInfo_OutgoingTxBatch proto.InternalMessageInfo

func (m *OutgoingTxBatch) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

func (m *OutgoingTxBatch) GetElements() []*OutgoingTransferTx {
	if m != nil {
		return m.Elements
	}
	return nil
}

func (m *OutgoingTxBatch) GetTotalFee() *ERC20Token {
	if m != nil {
		return m.TotalFee
	}
	return nil
}

func (m *OutgoingTxBatch) GetBridgedDenominator() *BridgedDenominator {
	if m != nil {
		return m.BridgedDenominator
	}
	return nil
}

func (m *OutgoingTxBatch) GetValset() *Valset {
	if m != nil {
		return m.Valset
	}
	return nil
}

func (m *OutgoingTxBatch) GetTokenContract() []byte {
	if m != nil {
		return m.TokenContract
	}
	return nil
}

type OutgoingTransferTx struct {
	Id          uint64      `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Sender      string      `protobuf:"bytes,2,opt,name=sender,proto3" json:"sender,omitempty"`
	DestAddress []byte      `protobuf:"bytes,3,opt,name=dest_address,json=destAddress,proto3" json:"dest_address,omitempty"`
	Amount      *ERC20Token `protobuf:"bytes,4,opt,name=amount,proto3" json:"amount,omitempty"`
	BridgeFee   *ERC20Token `protobuf:"bytes,5,opt,name=bridge_fee,json=bridgeFee,proto3" json:"bridge_fee,omitempty"`
}

func (m *OutgoingTransferTx) Reset()         { *m = OutgoingTransferTx{} }
func (m *OutgoingTransferTx) String() string { return proto.CompactTextString(m) }
func (*OutgoingTransferTx) ProtoMessage()    {}
func (*OutgoingTransferTx) Descriptor() ([]byte, []int) {
	return fileDescriptor_398e85e0d69cec73, []int{1}
}
func (m *OutgoingTransferTx) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OutgoingTransferTx.Unmarshal(m, b)
}
func (m *OutgoingTransferTx) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OutgoingTransferTx.Marshal(b, m, deterministic)
}
func (m *OutgoingTransferTx) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OutgoingTransferTx.Merge(m, src)
}
func (m *OutgoingTransferTx) XXX_Size() int {
	return xxx_messageInfo_OutgoingTransferTx.Size(m)
}
func (m *OutgoingTransferTx) XXX_DiscardUnknown() {
	xxx_messageInfo_OutgoingTransferTx.DiscardUnknown(m)
}

var xxx_messageInfo_OutgoingTransferTx proto.InternalMessageInfo

func (m *OutgoingTransferTx) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *OutgoingTransferTx) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *OutgoingTransferTx) GetDestAddress() []byte {
	if m != nil {
		return m.DestAddress
	}
	return nil
}

func (m *OutgoingTransferTx) GetAmount() *ERC20Token {
	if m != nil {
		return m.Amount
	}
	return nil
}

func (m *OutgoingTransferTx) GetBridgeFee() *ERC20Token {
	if m != nil {
		return m.BridgeFee
	}
	return nil
}

func init() {
	proto.RegisterType((*OutgoingTxBatch)(nil), "peggy.v1.OutgoingTxBatch")
	proto.RegisterType((*OutgoingTransferTx)(nil), "peggy.v1.OutgoingTransferTx")
}

func init() { proto.RegisterFile("peggy/v1/batch.proto", fileDescriptor_398e85e0d69cec73) }

var fileDescriptor_398e85e0d69cec73 = []byte{
	// 463 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x92, 0xcf, 0x6e, 0xd3, 0x40,
	0x10, 0xc6, 0xbd, 0x69, 0x13, 0x92, 0x4d, 0x28, 0x68, 0x1b, 0x21, 0x2b, 0x42, 0x8e, 0xa9, 0x84,
	0xe4, 0x03, 0xd8, 0x4d, 0x7a, 0x41, 0xdc, 0x48, 0xa1, 0x07, 0x24, 0x84, 0x64, 0x45, 0x1c, 0xb8,
	0x44, 0x6b, 0xef, 0xd4, 0xb1, 0xb0, 0x77, 0x23, 0xef, 0x24, 0x4a, 0xdf, 0x80, 0x63, 0x1f, 0x81,
	0xbc, 0x0a, 0x27, 0x8e, 0x39, 0x72, 0x44, 0xc9, 0x8b, 0xa0, 0xac, 0x4d, 0x42, 0x55, 0xa9, 0xb7,
	0x9d, 0xdf, 0x7c, 0xf3, 0x67, 0x3f, 0x0d, 0xed, 0xce, 0x20, 0x49, 0x6e, 0x82, 0xc5, 0x20, 0x88,
	0x38, 0xc6, 0x53, 0x7f, 0x56, 0x28, 0x54, 0xac, 0x69, 0xa8, 0xbf, 0x18, 0xf4, 0xba, 0x89, 0x4a,
	0x94, 0x81, 0xc1, 0xee, 0x55, 0xe6, 0x7b, 0xbd, 0x7d, 0x15, 0x47, 0x04, 0x8d, 0x1c, 0x53, 0x25,
	0xab, 0xdc, 0xe9, 0x3e, 0x37, 0x53, 0x2a, 0xab, 0xe0, 0x61, 0x0c, 0xde, 0xcc, 0x40, 0x97, 0xf4,
	0xec, 0x67, 0x8d, 0x3e, 0xf9, 0x3c, 0xc7, 0x44, 0xa5, 0x32, 0x19, 0x2f, 0x47, 0xbb, 0x05, 0x58,
	0x97, 0xd6, 0xa5, 0x92, 0x31, 0xd8, 0xc4, 0x25, 0xde, 0x71, 0x58, 0x06, 0xec, 0x0d, 0x6d, 0x42,
	0x06, 0x39, 0x48, 0xd4, 0x76, 0xcd, 0x3d, 0xf2, 0xda, 0xc3, 0xe7, 0xfe, 0xbf, 0x1d, 0xfd, 0x7d,
	0x8b, 0x82, 0x4b, 0x7d, 0x0d, 0xc5, 0x78, 0x19, 0xee, 0xd5, 0x6c, 0x40, 0x5b, 0xa8, 0x90, 0x67,
	0x93, 0x6b, 0x00, 0xfb, 0xd8, 0x25, 0x5e, 0x7b, 0xd8, 0x3d, 0x94, 0x7e, 0x08, 0x2f, 0x87, 0xe7,
	0x63, 0xf5, 0x0d, 0x64, 0xd8, 0x34, 0xb2, 0x2b, 0x00, 0xf6, 0x89, 0x9e, 0x46, 0x45, 0x2a, 0x12,
	0x10, 0x13, 0x01, 0x52, 0xe5, 0xa9, 0xe4, 0xa8, 0x0a, 0xbb, 0x6e, 0x8a, 0xff, 0x9b, 0x3b, 0x2a,
	0x45, 0xef, 0x0f, 0x9a, 0x90, 0x45, 0xf7, 0x18, 0xf3, 0x68, 0x63, 0xc1, 0x33, 0x0d, 0x68, 0x3f,
	0x32, 0x1d, 0x9e, 0x1e, 0x3a, 0x7c, 0x31, 0x3c, 0xac, 0xf2, 0xec, 0x25, 0x3d, 0xc1, 0xdd, 0x2e,
	0x93, 0x58, 0x49, 0x2c, 0x78, 0x8c, 0x76, 0xd3, 0x25, 0x5e, 0x27, 0x7c, 0x6c, 0xe8, 0x65, 0x05,
	0xdf, 0x76, 0xbe, 0xaf, 0xfa, 0xd6, 0xed, 0xaa, 0x6f, 0xfd, 0x58, 0xf5, 0xad, 0xb3, 0x35, 0xa1,
	0xec, 0xbe, 0x03, 0xec, 0x84, 0xd6, 0x52, 0x51, 0x99, 0x58, 0x4b, 0x05, 0x7b, 0x46, 0x1b, 0x1a,
	0xa4, 0x80, 0xc2, 0xae, 0xb9, 0xc4, 0x6b, 0x85, 0x55, 0xc4, 0x5e, 0xd0, 0x8e, 0x00, 0x8d, 0x13,
	0x2e, 0x44, 0x01, 0x5a, 0xdb, 0x47, 0x66, 0x62, 0x7b, 0xc7, 0xde, 0x95, 0x88, 0xbd, 0xa2, 0x0d,
	0x9e, 0xab, 0xb9, 0xc4, 0x07, 0xfd, 0xab, 0x34, 0xec, 0x82, 0xd2, 0xd2, 0x04, 0xe3, 0x78, 0xfd,
	0x81, 0x8a, 0x56, 0xa9, 0xbb, 0x02, 0xb8, 0xfb, 0xa5, 0xd1, 0xc7, 0x5f, 0x1b, 0x87, 0xac, 0x37,
	0x0e, 0xf9, 0xb3, 0x71, 0xc8, 0xed, 0xd6, 0xb1, 0xd6, 0x5b, 0xc7, 0xfa, 0xbd, 0x75, 0xac, 0xaf,
	0xe7, 0x49, 0x8a, 0xd3, 0x79, 0xe4, 0xc7, 0x2a, 0x0f, 0x78, 0x86, 0x53, 0xe0, 0xaf, 0x25, 0x60,
	0x50, 0x5e, 0x57, 0xae, 0xc4, 0x3c, 0x83, 0x60, 0x59, 0x85, 0xe6, 0xd2, 0xa2, 0x86, 0x39, 0xb5,
	0x8b, 0xbf, 0x01, 0x00, 0x00, 0xff, 0xff, 0xeb, 0x26, 0x51, 0x1a, 0xe9, 0x02, 0x00, 0x00,
}
